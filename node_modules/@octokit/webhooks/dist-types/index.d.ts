/// <reference types="node" />
import { createEventHandler } from "./event-handler/index";
import { createMiddleware } from "./middleware/index";
import { sign } from "./sign/index";
import { verify } from "./verify/index";
import { Options, WebhookEvent } from "./types";
import { EventNames } from "./generated/event-names";
import { GetWebhookPayloadTypeFromEvent } from "./generated/get-webhook-payload-type-from-event";
import { IncomingMessage, ServerResponse } from "http";
declare class Webhooks<T extends WebhookEvent = WebhookEvent> {
    sign: (payload: string | object) => string;
    verify: (eventPayload?: object, signature?: string) => boolean;
    on: <E extends EventNames.All>(event: E | E[], callback: (event: GetWebhookPayloadTypeFromEvent<E, T>) => Promise<void> | void) => void;
    removeListener: <E extends EventNames.All>(event: E | E[], callback: (event: GetWebhookPayloadTypeFromEvent<E, T>) => Promise<void> | void) => void;
    receive: (options: {
        id: string;
        name: string;
        payload: any;
    }) => Promise<void>;
    middleware: (request: IncomingMessage, response: ServerResponse, next?: (err?: any) => void) => void | Promise<void>;
    verifyAndReceive: (options: WebhookEvent & {
        signature: string;
    }) => Promise<void>;
    constructor(options?: Options<T>);
}
declare const createWebhooksApi: Function;
export { EventNames } from "./generated/event-names";
export { EventPayloads } from "./generated/event-payloads";
export { createEventHandler, createMiddleware, createWebhooksApi, Webhooks, WebhookEvent, sign, verify, };
