import { createEventHandler } from "./event-handler/index";
import { createMiddleware } from "./middleware/index";
import { middleware } from "./middleware/middleware";
import { sign } from "./sign/index";
import { verify } from "./verify/index";
import { verifyAndReceive } from "./middleware/verify-and-receive";
class Webhooks {
    constructor(options) {
        if (!options || !options.secret) {
            throw new Error("options.secret required");
        }
        const state = {
            eventHandler: createEventHandler(options),
            path: options.path || "/",
            secret: options.secret,
            hooks: {},
        };
        this.sign = sign.bind(null, options.secret);
        this.verify = verify.bind(null, options.secret);
        this.on = state.eventHandler.on;
        this.removeListener = state.eventHandler.removeListener;
        this.receive = state.eventHandler.receive;
        this.middleware = middleware.bind(null, state);
        this.verifyAndReceive = verifyAndReceive.bind(null, state);
    }
}
const createWebhooksApi = Webhooks.prototype.constructor;
export { createEventHandler, createMiddleware, createWebhooksApi, Webhooks, sign, verify, };
